library(FRESA.CAD); library(mlbench)
op <- par(no.readonly = TRUE)
data(Sonar)
Sonar$Class <- 1*(Sonar$Class == "M")
ExperimentName <- "Sonar_ALL_Methods_95"
theData <- Sonar;
theOutcome <- "Class";
reps <- 200;
fraction <- 0.95;
BSIWIMSFileName <- paste(ExperimentName,"ALLFRESAMethod.RDATA",sep = "_")
CVFileName <- paste(ExperimentName,"ALLCVMethod.RDATA",sep = "_")
104 * 0.05
108 * 0.05
108 * 0.95
104 * 0.95
sum(Sonar$Class == M)
sum(Sonar$Class == "M")
View(Sonar)
sum(Sonar$Class == 0)
sum(Sonar$Class == 1)
97 * 0.05
111 * 0.05
6 + 5 = 11
6 + 5
test <- randomCV(theData,theOutcome,MASS::lda,trainFraction =0.95,repetitions = 1,classSamplingType="Proportional")
test <- randomCV(theData,theOutcome,BSWiMS.model,trainFraction =0.95,repetitions = 1,classSamplingType="Proportional")
version(FRESA.CAD)
sessionInfo()
update.packages(FRESA.CAD)
update.packages("FRESA.CAD")
library(FRESA.CAD)
sessionInfo()
remove(list = ls())
library(MASS)
pc <- rmvnorm(n=100, mean = c(3, 3), sigma = matrix(c(5, 0.75 * sqrt(50),0.75 * sqrt(50), 10), 2, 2))
library(rmvnorm)
install.packes(library(rmvnorm))
install.packages(library(rmvnorm))
pc <- mvrnorm(n=100, mean = c(3, 3), sigma = matrix(c(5, 0.75 * sqrt(50),0.75 * sqrt(50), 10), 2, 2))
pc <- mvrnorm(n=100, mu = c(3, 3), Sigma = matrix(c(5, 0.75 * sqrt(50),0.75 * sqrt(50), 10), 2, 2))
pc
plot(pc[, 1], pc[, 2])
pc <- mvrnorm(n=200, mu = c(3, 3), Sigma = matrix(c(5, 0.75 * sqrt(50),0.75 * sqrt(50), 10), 2, 2))
plot(pc[, 1], pc[, 2], xlim = c(0, 6), ylim = c(0, 6))
cor(pc)
enrange <- function(x, ll, hl){
x <- (x - min(x)) / (max(x) - min(x))
return(x * (hl - ll) + ll)
}
test <- apply(pc, 2, enrange, 0, 6)
plot(test[, 1], test[, 2],)
cor(test)
cor.sims <- list(mvrnorm(n=500, mu = c(3, 3), Sigma = matrix(c(5, 0.75 * sqrt(50), 0.75 * sqrt(50), 10), 2, 2)),
mvrnorm(n=500, mu = c(3, 3), Sigma = matrix(c(5, -0.75 * sqrt(50), -0.75 * sqrt(50), 10), 2, 2)),
mvrnorm(n=500, mu = c(3, 3), Sigma = matrix(c(5, 0 * sqrt(50), 0 * sqrt(50), 10), 2, 2))
)
cor.sims <- lapply(c(0.75, -0.75, 0), function(p) mvrnorm(n = 500, mu = c(3, 3), Sigma = matrix(c(5, p * sqrt(50), p * sqrt(50), 10), 2, 2)))
cor.sims <- lapply(
cor.sims,
function(m){
colnames(m) <- c("Gene1", "Gene2")
apply(m, 2, enrange, ll = 0, lh = 6)
}
)
cor.sims <- lapply(
cor.sims,
function(m){
colnames(m) <- c("Gene1", "Gene2")
apply(m, 2, enrange, ll = 0, hl = 6)
}
)
cor.sims <- lapply(c(0.75, -0.75, 0), function(p) mvrnorm(n = 500, mu = c(3, 3), Sigma = matrix(c(5, p * sqrt(50), p * sqrt(50), 10), 2, 2)))
names(cor.sims) <- c("Strong positive correlation", "Strong negative correlation", "No correlation")
cor.sims <- lapply(
1:3,
function(i){
colnames(cor.sims[[i]]) <- c("Gene1", "Gene2")
apply(cor.sims[[i]], 2, enrange, ll = 0, hl = 6)
cbind.data.frame(cor.sims[[i]], Correlation = rep(names(cor.sims)[i]), nrow(cor.sims[[i]]))
}
)
cor.sims <- do.call(rbind, cor.sims)
View(cor.sims)
cor.sims <- lapply(c(0.75, -0.75, 0), function(p) mvrnorm(n = 500, mu = c(3, 3), Sigma = matrix(c(5, p * sqrt(50), p * sqrt(50), 10), 2, 2)))
names(cor.sims) <- c("Strong positive", "Strong negative", "No correlation")
cor.sims <- lapply(
1:3,
function(i){
colnames(cor.sims[[i]]) <- c("Gene1", "Gene2")
apply(cor.sims[[i]], 2, enrange, ll = 0, hl = 6)
cbind.data.frame(cor.sims[[i]], Correlation = rep(names(cor.sims)[i], nrow(cor.sims[[i]])))
}
)
cor.sims <- do.call(rbind, cor.sims)
View(cor.sims)
library(ggplot2)
cor.sims <- lapply(c(0.75, -0.75, 0), function(p) mvrnorm(n = 500, mu = c(3, 3), Sigma = matrix(c(5, p * sqrt(50), p * sqrt(50), 10), 2, 2)))
names(cor.sims) <- c("Strong positive (p = 0.75)", "Strong negative (p = -0.75)", "No correlation (p = 0)")
cor.sims <- lapply(
1:3,
function(i){
colnames(cor.sims[[i]]) <- c("Gene1", "Gene2")
apply(cor.sims[[i]], 2, enrange, ll = 0, hl = 6)
cbind.data.frame(cor.sims[[i]], Correlation = rep(names(cor.sims)[i], nrow(cor.sims[[i]])))
}
)
cor.sims <- do.call(rbind, cor.sims)
ggplot(data = cor.sims, aes(x = Gene1, y = Gene2, colour = Correlation)) +
geom_point() +
facet_grid(. ~ Correlation)
View(cor.sims)
cor.sims <- lapply(c(0.75, -0.75, 0), function(p) mvrnorm(n = 500, mu = c(3, 3), Sigma = matrix(c(5, p * sqrt(50), p * sqrt(50), 10), 2, 2)))
names(cor.sims) <- c("Strong positive (p = 0.75)", "Strong negative (p = -0.75)", "No correlation (p = 0)")
cor.sims <- lapply(
1:3,
function(i){
colnames(cor.sims[[i]]) <- c("Gene1", "Gene2")
cor.sims[[i]] <- apply(cor.sims[[i]], 2, enrange, ll = 0, hl = 6)
cbind.data.frame(cor.sims[[i]], Correlation = rep(names(cor.sims)[i], nrow(cor.sims[[i]])))
}
)
cor.sims <- do.call(rbind, cor.sims)
ggplot(data = cor.sims, aes(x = Gene1, y = Gene2, colour = Correlation)) +
geom_point() +
scale_colour_discrete(c("Green", "Red", "Blue"))
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x)
facet_grid(. ~ Correlation)
ggplot(data = cor.sims, aes(x = Gene1, y = Gene2, colour = Correlation)) +
geom_point() +
scale_colour_discrete(c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
facet_grid(. ~ Correlation)
ggplot(data = cor.sims, aes(x = Gene1, y = Gene2, colour = Correlation)) +
geom_point() +
scale_colour_discrete(c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
coord_fixed() +
facet_grid(Correlation . ~)
ggplot(data = cor.sims, aes(x = Gene1, y = Gene2, colour = Correlation)) +
geom_point() +
scale_colour_discrete(c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
facet_grid(Correlation . ~)
ggplot(data = cor.sims, aes(x = Gene1, y = Gene2, colour = Correlation)) +
geom_point() +
scale_colour_discrete(c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
coord_fixed() +
facet_grid(Correlation  ~.)
ggplot(data = cor.sims, aes(x = Gene1, y = Gene2, colour = Correlation)) +
geom_point() +
scale_colour_discrete(c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
facet_grid(Correlation  ~.)
ggplot(data = cor.sims, aes(x = Gene1, y = Gene2, colour = Correlation)) +
geom_point() +
scale_colour_discrete(c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
coord_fixed() +
theme(legend.position = "None")
facet_grid(Correlation  ~.)
ggplot(data = cor.sims, aes(x = Gene1, y = Gene2, colour = Correlation)) +
geom_point() +
scale_colour_manual(c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
coord_fixed() +
theme(legend.position = "None") +
facet_grid(Correlation  ~.)
knitr::opts_chunk$set(echo = TRUE)
ggplot(data = cor.sims, aes(x = Gene1, y = Gene2, colour = Correlation)) +
geom_point() +
scale_colour_manual(values = c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
coord_fixed() +
theme(legend.position = "None") +
facet_grid(Correlation  ~.)
ggplot(data = cor.sims, aes(x = Gene1, y = Gene2, colour = Correlation)) +
geom_point() +
scale_colour_manual(values = c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
coord_fixed() +
theme(legend.position = "None") +
facet_grid(Correlation  ~.)
png("/Users/Mike/Desktop/corSim.png", units = "in", width = 5, height = 6, res = 300)
ggplot(data = cor.sims, aes(x = Gene1, y = Gene2, colour = Correlation)) +
geom_point() +
scale_colour_manual(values = c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
coord_fixed() +
theme(legend.position = "None") +
facet_grid(Correlation  ~.)
dev.off()
cor.sims <- lapply(c(0.75, -0.75, 0), function(p) mvrnorm(n = 500, mu = c(3, 3), Sigma = matrix(c(5, p * sqrt(50), p * sqrt(50), 10), 2, 2)))
names(cor.sims) <- c("Strong positive correlation (p ≈ 0.75)", "Strong negative correlation (p ≈ -0.75)", "No correlation (p ≈ 0)")
cor.sims <- lapply(
1:3,
function(i){
cor.sims[[i]] <- apply(cor.sims[[i]], 2, enrange, ll = 0, hl = 6)
cbind.data.frame(cor.sims[[i]], Correlation = rep(names(cor.sims)[i], nrow(cor.sims[[i]])))
}
)
cor.sims <- do.call(rbind, cor.sims)
ggplot(data = cor.sims, aes(x = cor.sims[, 1], y = cor.sims[, 2], colour = Correlation)) +
geom_point() +
scale_colour_manual(values = c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
coord_fixed() +
theme(legend.position = "None", x = "Expression of Gene 1", y = "Expression of Gene 4   Expression of Gene 3   Expression of Gene 2") +
facet_grid(Correlation  ~.)
ggplot(data = cor.sims, aes(x = cor.sims[, 1], y = cor.sims[, 2], colour = Correlation)) +
geom_point() +
scale_colour_manual(values = c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
xlab("Expression of Gene 1") +
ylab("Expression of Gene 4   Expression of Gene 3   Expression of Gene 2")
coord_fixed() +
theme(legend.position = "None") +
facet_grid(Correlation  ~.)
View(cor.sims)
ggplot(data = cor.sims, aes(x = cor.sims[, 1], y = cor.sims[, 2], colour = Correlation)) +
geom_point() +
scale_colour_manual(values = c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
xlab("Expression of Gene 1") +
ylab("Expression of Gene 4   Expression of Gene 3   Expression of Gene 2") +
coord_fixed() +
theme(legend.position = "None") +
facet_grid(Correlation  ~.)
ggplot(data = cor.sims, aes(x = cor.sims[, 1], y = cor.sims[, 2], colour = Correlation)) +
geom_point() +
scale_colour_manual(values = c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
xlab("Expression of Gene 1") +
ylab("Expression of Gene 4          Expression of Gene 3          Expression of Gene 2") +
coord_fixed() +
theme(legend.position = "None") +
facet_grid(Correlation  ~.)
ggplot(data = cor.sims, aes(x = cor.sims[, 1], y = cor.sims[, 2], colour = Correlation)) +
geom_point() +
scale_colour_manual(values = c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
xlab("Expression of Gene 1") +
ylab("Expression of Gene 4               Expression of Gene 3               Expression of Gene 2") +
coord_fixed() +
theme(legend.position = "None") +
facet_grid(Correlation  ~.)
png("/Users/Mike/Desktop/corSim.png", units = "in", width = 5, height = 6, res = 300)
ggplot(data = cor.sims, aes(x = cor.sims[, 1], y = cor.sims[, 2], colour = Correlation)) +
geom_point() +
scale_colour_manual(values = c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
xlab("Expression of Gene 1") +
ylab("Expression of Gene 4               Expression of Gene 3               Expression of Gene 2") +
coord_fixed() +
theme(legend.position = "None") +
facet_grid(Correlation  ~.)
dev.off()
png("/Users/Mike/Desktop/corSim.png", units = "in", width = 5, height = 6, res = 300)
ggplot(data = cor.sims, aes(x = cor.sims[, 1], y = cor.sims[, 2], colour = Correlation)) +
geom_point() +
scale_colour_manual(values = c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
xlab("Expression of Gene 1") +
ylab("  Expression of Gene 4                 Expression of Gene 3         Expression of Gene 2") +
coord_fixed() +
theme(legend.position = "None") +
facet_grid(Correlation  ~.)
dev.off()
png("/Users/Mike/Desktop/corSim.png", units = "in", width = 5, height = 6, res = 300)
ggplot(data = cor.sims, aes(x = cor.sims[, 1], y = cor.sims[, 2], colour = Correlation)) +
geom_point() +
scale_colour_manual(values = c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
xlab("Expression of Gene 1") +
ylab("    Expression of Gene 4          Expression of Gene 3    Expression of Gene 2") +
coord_fixed() +
theme(legend.position = "None") +
facet_grid(Correlation  ~.)
dev.off()
png("/Users/Mike/Desktop/corSim.png", units = "in", width = 5, height = 6, res = 300)
ggplot(data = cor.sims, aes(x = cor.sims[, 1], y = cor.sims[, 2], colour = Correlation)) +
geom_point() +
scale_colour_manual(values = c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
xlab("Expression of Gene 1") +
ylab("    Expression of Gene 4      Expression of Gene 3      Expression of Gene 2") +
coord_fixed() +
theme(legend.position = "None") +
facet_grid(Correlation  ~.)
png("/Users/Mike/Desktop/corSim.png", units = "in", width = 5, height = 6, res = 300)
dev.off()
dev.off()
png("/Users/Mike/Desktop/corSim.png", units = "in", width = 5, height = 6, res = 300)
ggplot(data = cor.sims, aes(x = cor.sims[, 1], y = cor.sims[, 2], colour = Correlation)) +
geom_point() +
scale_colour_manual(values = c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
xlab("Expression of Gene 1") +
ylab("Expression of Gene 4  Expression of Gene 3  Expression of Gene 2") +
coord_fixed() +
theme(legend.position = "None") +
facet_grid(Correlation  ~.)
dev.off()
png("/Users/Mike/Desktop/corSim.png", units = "in", width = 5, height = 6, res = 300)
ggplot(data = cor.sims, aes(x = cor.sims[, 1], y = cor.sims[, 2], colour = Correlation)) +
geom_point() +
scale_colour_manual(values = c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
xlab("Expression of Gene 1") +
ylab("Expression of Gene 4    Expression of Gene 3    Expression of Gene 2") +
coord_fixed() +
theme(legend.position = "None") +
facet_grid(Correlation  ~.)
dev.off()
png("/Users/Mike/Desktop/corSim.png", units = "in", width = 5, height = 6, res = 300)
ggplot(data = cor.sims, aes(x = cor.sims[, 1], y = cor.sims[, 2], colour = Correlation)) +
geom_point() +
scale_colour_manual(values = c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
xlab("Expression of Gene 1") +
ylab("Expression of Gene 4  Expression of Gene 3  Expression of Gene 2") +
coord_fixed() +
theme(legend.position = "None") +
facet_grid(Correlation  ~.)
dev.off()
png("/Users/Mike/Desktop/corSim.png", units = "in", width = 5, height = 6, res = 300)
ggplot(data = cor.sims, aes(x = cor.sims[, 1], y = cor.sims[, 2], colour = Correlation)) +
geom_point() +
scale_colour_manual(values = c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
xlab("Expression of Gene 1") +
ylab("Expression of Gene 4          Expression of Gene 3     Expression of Gene 2") +
coord_fixed() +
theme(legend.position = "None") +
facet_grid(Correlation  ~.)
dev.off()
png("/Users/Mike/Desktop/corSim.png", units = "in", width = 5, height = 6, res = 300)
ggplot(data = cor.sims, aes(x = cor.sims[, 1], y = cor.sims[, 2], colour = Correlation)) +
geom_point() +
scale_colour_manual(values = c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
xlab("Expression of Gene 1") +
ylab("Expression of Gene 4          Expression of Gene 3      Expression of Gene 2") +
coord_fixed() +
theme(legend.position = "None") +
facet_grid(Correlation  ~.)
dev.off()
png("/Users/Mike/Desktop/corSim.png", units = "in", width = 5, height = 6, res = 300)
ggplot(data = cor.sims, aes(x = cor.sims[, 1], y = cor.sims[, 2], colour = Correlation)) +
geom_point() +
scale_colour_manual(values = c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
xlab("Expression of Gene 1") +
ylab("Expression of Gene 4          Expression of Gene 3       Expression of Gene 2") +
coord_fixed() +
theme(legend.position = "None") +
facet_grid(Correlation  ~.)
dev.off()
cor.sims <- lapply(c(0.75, -0.75, 0), function(p) mvrnorm(n = 500, mu = c(3, 3), Sigma = matrix(c(5, p * sqrt(50), p * sqrt(50), 10), 2, 2)))
names(cor.sims) <- c("Strong positive\ncorrelation (p ≈ 0.75)", "Strong negative\ncorrelation (p ≈ -0.75)", "No correlation (p ≈ 0)")
cor.sims <- lapply(
1:3,
function(i){
cor.sims[[i]] <- apply(cor.sims[[i]], 2, enrange, ll = 0, hl = 6)
cbind.data.frame(cor.sims[[i]], Correlation = rep(names(cor.sims)[i], nrow(cor.sims[[i]])))
}
)
cor.sims <- do.call(rbind, cor.sims)
png("/Users/Mike/Desktop/corSim.png", units = "in", width = 5, height = 6, res = 300)
ggplot(data = cor.sims, aes(x = cor.sims[, 1], y = cor.sims[, 2], colour = Correlation)) +
geom_point() +
scale_colour_manual(values = c("Green", "Red", "Blue")) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
xlab("Expression of Gene 1") +
ylab("Expression of Gene 4          Expression of Gene 3       Expression of Gene 2") +
coord_fixed() +
theme(legend.position = "None") +
facet_grid(Correlation  ~.)
dev.off()
install.packages(c("knitr", "RISmed"))
options(stringsAsFactors = F)
library(RISmed)
query <- "\"coexpression\"[TIAB] AND \"database\"[TIAB] AND
(\"normal\"[TIAB] OR \"co-expression\"[TIAB] OR \"human\"[TIAB]
OR \"bias\"[TIAB])"
search <- EUtilsSummary(query, db = "pubmed")
(13568 * 94.7) / 19588
getwd()
setwd("Desktop/work_files/code/ML_techniques/assignment1/")
csv1 <- read.csv("index_dmc.csv", header = TRUE)
csv2 <- read.csv("SD27_Latent.csv", header = TRUE)
View(csv1)
View(csv2)
which(unique(csv1$fingerprint) %in% unique(csv2$fingerprint))
length(which(unique(csv1$fingerprint) %in% unique(csv2$fingerprint)))
csv2 <- read.csv("diff.csv", header = TRUE)
View(csv2)
rownames(csv1) <- stringi::stri_c(csv1$fingerprint, csv1$minutia, sep = "#")
View(csv1)
rownames(csv2) <- stringi::stri_c(csv2$fingerprint, csv2$minutia, sep = "#")
View(csv2)
head(csv1$score_change)
View(csv1)
crossedData <- cbind.data.frame(csv2, csv1[rownames(csv2), "score_change"])
View(crossedData)
csv1 <- read.csv("index_dmc.csv", header = TRUE)
csv2 <- read.csv("diff.csv", header = TRUE)
rownames(csv1) <- stringi::stri_c(csv1$fingerprint, csv1$minutia, sep = "#")
rownames(csv2) <- stringi::stri_c(csv2$fingerprint, csv2$minutia, sep = "#")
crossedData <- cbind.data.frame(csv2, score_change = csv1[rownames(csv2), "score_change"])
View(crossedData)
csv3 <- read.csv("SD27_Latent.csv")
View(csv3)
View(crossedData)
append(yes = 1, no  =2)
type <- list()
i <- 1
query <- unname(csv3[i, 1:4]
)
query
potential_matches <- which(grepl(query[1, 1], crossedData$fingerprint))
j <- potential_matches[1]
ref <- unname(crossedData[j, c("x", "y", "angle")])
ref
ref[1, ]
rownames(ref) <- NULL
ref[1, ]
query[1, 2:4]
identical(ref[1, ], query[1, 2:4])
type <- append(type, c(j, csv3[i, 5]))
type
write.csv(crossedData, "crossedData.csv")
csv3 <- read.csv("crossedData.csv")
View(csv3)
write.csv(crossedData, "crossedData.csv", row.names = TRUE)
csv3 <- read.csv("crossedData.csv")
View(csv3)
rm(list = ls())
