library(readr)
diabetes <- read_csv("OneDrive/Documentos/MCC/Verano 2020/data/diabetes.csv")
View(diabetes)
View(diabetes)
View(diabetes)
testing_dataset <- read.csv("~/Downloads/testing_dataset.csv")
View(testing_dataset)
testing_dataset$score_change[testing_dataset$score_change<0] <- 1
View(testing_dataset)
View(testing_dataset)
testing_dataset$score_change[testing_dataset$score_change=0] <- 2
testing_dataset$score_change[testing_dataset$score_change==0] <- 2
testing_dataset$score_change[testing_dataset$score_change>0] <- 3
library(caret)
View(testing_dataset)
tournament =  c ("0101110111","0111001001","0011001001","1110101100","1000010010","0000100010")
set.seed(42)
random_tournament = sample(tournament,6)
f = vector()
for (i in 1:length(random_tournament) ) {
f[i]=  table(strsplit(random_tournament[i],"")) [2]
}
mating_pool=  vector()
#slinding window of 3 elements
for (i in 1:length(f) ) {
sliding_window =  seq(from=i,to=i+2,by=1)
overflow=  i+2 -  length(f)
if (overflow > 0) {
sliding_window = c(sliding_window[c(1:(3 - overflow))],1:overflow)
}
mating_pool[i] = max(f[sliding_window] )
}
random_tournament
Population = c("AAOOEIIIOEA", "EEOUEO" ,"UUIOOAAIEEO","AAAEEEIIIOUUU","AUEIOUOOEEIIUIA")
fitness = vector()
for (i in 1:length(Population)){
fitness[i] = sum(floor(table(strsplit(Population[i],""))/2))
}
prop_selection= print(fitness / sum(fitness))
r = vector()
c = 2
n_1 = (length(Population)-1)
for (i in 1:length(fitness) ){
r[i] = which(sort(fitness) == fitness[i])[1] -1
}
linear_ranking_fitness = print(r * (c/n_1))
m = 3
exponential_ranking_fitness = print(m * (r/n_1) ^ (m-1))
selection_df <- data.frame(population = Population,prop_selection=prop_selection)
library(ggplot2)
ggplot(selection_df, aes(x=population, y=prop_selection)) +
geom_bar(stat="identity")
ggplot(selection_df, aes(x=population, y=prop_selection)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=len), vjust=1.6, color="white", size=3.5)+
theme_minimal()
ggplot(selection_df, aes(x=population, y=prop_selection)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=prop_selection), vjust=1.6, color="white", size=3.5)+
theme_minimal()
ggplot(selection_df, aes(x=population, y=prop_selection)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=round(prop_selection,5)), vjust=1.6, color="white", size=3.5)+
theme_minimal()
View(selection_df)
selection_df <-cbind(selection_df, linear_ranking_fitness)
View(selection_df)
ggplot(selection_df, aes(x=population, y=linear_ranking_fitness)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=round(linear_ranking_fitness,5)), vjust=1.6, color="white", size=3.5)+
theme_minimal()
ggplot(selection_df, aes(x=population, y=linear_ranking_fitness)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=round(linear_ranking_fitness,5)), vjust=1.6, color="black", size=3.5)+
theme_minimal()
ggplot(selection_df, aes(x=population, y=prop_selection)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=round(prop_selection,5)), vjust=1.6, color="black", size=3.5)+
theme_minimal()
ggplot(selection_df, aes(x=population, y=exponential_ranking_fitness)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=round(exponential_ranking_fitness,5)), vjust=1.6, color="black", size=3.5)+
theme_minimal()
Population = c("AAOOEIIIOEA", "EEOUEO" ,"UUIOOAAIEEO","AAAEEEIIIOUUU","AUEIOUOOEEIIUIA")
fitness = vector()
fitness_k = vector()
for (i in 1:length(Population)){
fitness[i] = sum(floor(table(strsplit(Population[i],""))/2))
fitness_k[i] =  fitness[i] * 5
}
prop_selection= print(fitness / sum(fitness))
library(ggplot2)
selection_df <- data.frame(population = Population,prop_selection=prop_selection)
ggplot(selection_df, aes(x=population, y=prop_selection)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=round(prop_selection,5)), vjust=1.6, color="black", size=3.5)+
theme_minimal()
r = vector()
r_k = vector()
c = 2
n_1 = (length(Population)-1)
for (i in 1:length(fitness) ){
r[i] = which(sort(fitness) == fitness[i])[1] -1
r_k[i] = which(sort(fitness_k) == fitness_k[i])[1] -1
}
linear_ranking_fitness = print(r * (c/n_1))
linear_ranking_fitness_k = print(r_k * (c/n_1))
selection_df <-cbind(selection_df, linear_ranking_fitness)
ggplot(selection_df, aes(x=population, y=linear_ranking_fitness)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=round(linear_ranking_fitness,5)), vjust=1.6, color="black", size=3.5)+
theme_minimal()
ggplot(selection_df, aes(x=population, y=linear_ranking_fitness_k)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=round(linear_ranking_fitness_k,5)), vjust=1.6, color="black", size=3.5)+
theme_minimal()
prop_selection= print(fitness_k / sum(fitness_k))
m = 3
exponential_ranking_fitness = print(m * (r/n_1) ^ (m-1))
exponential_ranking_fitness_k = print(m * (r_k/n_1) ^ (m-1))
ggplot(selection_df, aes(x=population, y=exponential_ranking_fitness)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=round(exponential_ranking_fitness,5)), vjust=1.6, color="black", size=3.5)+
theme_minimal()
ggplot(selection_df, aes(x=population, y=exponential_ranking_fitness_k)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=round(exponential_ranking_fitness_k,5)), vjust=1.6, color="black", size=3.5)+
theme_minimal()
#ui= alpha* xi + (1-alpha)*yi
alpha= 1.0
u_1 = (alpha * x) + (1-alpha)*y
x = c(0.23, 0.57, 0.29, 0.44, 0.44)
y = c(0.63, 0.82, 0.62, 0.15, 0.51)
#ui= alpha* xi + (1-alpha)*yi
alpha= 1.0
u_1 = (alpha * x) + (1-alpha)*y
v_1= (alpha* y) + (1-alpha)*x
#results
u_1
v_1
#ui= alpha* xi + (1-alpha)*yi
alpha= 0
u_0 = (alpha * x) + (1-alpha)*y
v_0= (alpha* y) + (1-alpha)*x
#results
u_0
v_0
setwd("/Users/Eider/GitHub/ML-assignments/Assignment-1")
load("final_dataset.RData")
View(data)
B122X4I_1_1
