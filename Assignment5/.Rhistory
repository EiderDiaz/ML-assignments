tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=AUC, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.size = 0,
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
AUCs_binary <- read.csv("~/GitHub/ML-assignments/assignment2/AUCs_binary.csv")
meltAUCs_binary <- melt(AUCs_binary)
meltAUCs_binary <- cbind(label=rep(seq(1,50),7),meltAUCs_binary)
colnames(meltAUCs_binary) <- c("label","Model","AUC")
glimpse(meltAUCs_binary)
summary(meltAUCs_binary)
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=AUC, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.size = 0,
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
AUCs_binary <- read.csv("~/GitHub/ML-assignments/assignment2/AUCs_binary.csv")
meltAUCs_binary <- melt(AUCs_binary)
meltAUCs_binary <- cbind(label=rep(seq(1,50),7),meltAUCs_binary)
colnames(meltAUCs_binary) <- c("label","Model","AUC")
glimpse(meltAUCs_binary)
summary(meltAUCs_binary)
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=AUC, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.size = 0,
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
AUCs_binary <- read.csv("~/GitHub/ML-assignments/assignment2/AUCs_three.csv")
meltAUCs_binary <- melt(AUCs_binary)
meltAUCs_binary <- cbind(label=rep(seq(1,50),7),meltAUCs_binary)
colnames(meltAUCs_binary) <- c("label","Model","AUC")
glimpse(meltAUCs_binary)
summary(meltAUCs_binary)
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=AUC, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
AUCs_binary <- read.csv("~/GitHub/ML-assignments/assignment2/AUCs_binary.csv")
meltAUCs_binary <- melt(AUCs_binary)
meltAUCs_binary <- cbind(label=rep(seq(1,50),7),meltAUCs_binary)
colnames(meltAUCs_binary) <- c("label","Model","AUC")
glimpse(meltAUCs_binary)
summary(meltAUCs_binary)
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=AUC, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
AUCs_binary <- read.csv("~/GitHub/ML-assignments/assignment2/AUCs_binary.csv")
meltAUCs_binary <- melt(AUCs_binary)
meltAUCs_binary <- cbind(label=rep(seq(1,50),7),meltAUCs_binary)
colnames(meltAUCs_binary) <- c("label","Model","AUC")
glimpse(meltAUCs_binary)
summary(meltAUCs_binary)
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=AUC, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=AUC, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
AUCs_binary <- read.csv("~/GitHub/ML-assignments/assignment2/AUCs_binary.csv")
meltAUCs_binary <- melt(AUCs_binary)
meltAUCs_binary <- cbind(label=rep(seq(1,50),7),meltAUCs_binary)
colnames(meltAUCs_binary) <- c("label","Model","AUC")
glimpse(meltAUCs_binary)
summary(meltAUCs_binary)
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
AUCs_binary <- read.csv("~/GitHub/ML-assignments/assignment2/AUCs_three.csv")
meltAUCs_binary <- melt(AUCs_binary)
meltAUCs_binary <- cbind(label=rep(seq(1,50),7),meltAUCs_binary)
colnames(meltAUCs_binary) <- c("label","Model","AUC")
glimpse(meltAUCs_binary)
summary(meltAUCs_binary)
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$Model[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=AUC, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
AUCs_binary <- read.csv("~/GitHub/ML-assignments/assignment2/AUCs_binary.csv")
meltAUCs_binary <- melt(AUCs_binary)
meltAUCs_binary <- cbind(label=rep(seq(1,50),7),meltAUCs_binary)
colnames(meltAUCs_binary) <- c("label","Model","AUC")
glimpse(meltAUCs_binary)
summary(meltAUCs_binary)
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$Model[i]
if (meltAUCs_binary$AUC[i]  >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=AUC, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
AUCs_binary <- read.csv("~/GitHub/ML-assignments/assignment2/AUCs_three.csv")
meltAUCs_binary <- melt(AUCs_binary)
meltAUCs_binary <- cbind(label=rep(seq(1,50),7),meltAUCs_binary)
colnames(meltAUCs_binary) <- c("label","Model","AUC")
glimpse(meltAUCs_binary)
summary(meltAUCs_binary)
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$Model[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=AUC, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
shiny::runApp('GitHub/Shinny_app_DataProff')
runApp('GitHub/Shinny_app_DataProff/histograms.R')
runApp('GitHub/Shinny_app_DataProff/Wheather_weka.R')
runApp('GitHub/Shinny_app_DataProff/Wheather_weka.R')
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
View(weather)
# Build model
model <- randomForest(play ~ .,
data = weather,
ntree = 500,
mtry = 4,
importance = TRUE)
# Build model
model <- randomForest(as.factor(play) ~ .,
data = weather,
ntree = 500,
mtry = 4,
importance = TRUE)
runApp('GitHub/Shinny_app_DataProff/Wheather_weka.R')
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
weather$play <- as.factor(weather$play)
# Build model
model <- randomForest(play ~ .,
data = weather,
ntree = 500,
mtry = 4,
importance = TRUE)
runApp('GitHub/Shinny_app_DataProff/Wheather_weka.R')
weather[,c(1,5)] <- lapply(weather[,c(1,5)], factor)
View(weather)
library("scmamp")
install.packages("scmamp")
install.packages("Rgraphviz")
head(data_gh_2008)
library("scmamp")
library("ggplot2")
library("Rgraphviz")
data(data_blum_2015)
data(data_gh_2008)
head(data.blum.2015)
assignment5MLresults <- read.csv("~/Downloads/assignment5MLresults.csv")
View(assignment5MLresults)
table(assignment5MLresults$preprocessing)
library(dplyr)
min_max_df <- assignment5MLresults %>% select(preprocessing == "raw")
min_max_df <- assignment5MLresults %>% select(assignment5MLresults%preprocessing == "raw")
min_max_df <- assignment5MLresults %>% select(assignment5MLresults$preprocessing == "raw")
min_max_df <- assignment5MLresults %>% filter(preprocessing == "raw")
View(min_max_df)
table(assignment5MLresults$preprocessing)
std_df <- assignment5MLresults %>% filter(preprocessing == "std")
library(reshape)
table(assignment5MLresults$classifier)
classifiers <-c("BRM",   "GMM",  "ISOF", "ocSVM" )
t1 <- cast(min_max_df, classifiers=folder_name ,value = "auc")
t1 <- cast(min_max_df, folder_name=classifiers ,value = "auc")
t1 <- cast(min_max_df, classifier=folder_name ,value = "auc")
t1 <- cast(assignment5MLresults, classifier=folder_name ,value = "auc")
t1 <- melt(min_max_df, id.vars =c("classifier") )
View(t1)
t1 <- melt(min_max_df, id.vars =c("classifier") , value.name ="auc" )
View(t1)
t1 <- melt(min_max_df, id.vars =c("classifier","folder_name") , value.name ="auc" )
View(t1)
View(t1)
table(assignment5MLresults$preprocessing)
min_max_df <-assignment5MLresults %>% filter(preprocessing == "min_max")
minmax_std_df <- assignment5MLresults %>% filter(preprocessing == "minmax_std")
min_max_df_m <- melt(min_max_df, id.vars =c("classifier","folder_name") , value.name ="auc" )
std_df_m <- melt(std_df, id.vars =c("classifier","folder_name") , value.name ="auc" )
min_max_df_m <- melt(min_max_df, id.vars =c("classifier","folder_name") , value.name ="auc" )
minmax_std_df_m <- melt(minmax_std_df, id.vars =c("classifier","folder_name") , value.name ="auc" )
friedmanTest(min_max_df_m$value)
friedmanTest?
()
?friedmanTest
??friedmanTest
friedmanTest(min_max_df_m$value)
scmamp::friedmanTest(min_max_df_m$value)
View(min_max_df)
t1 <- melt(min_max_df, id.vars =c("classifier",))
t1 <- melt(min_max_df, id.vars =c("classifier"))
View(t1)
min_max_df$preprocessing <- NULL
T2 <- cast(min_max_df, classifier=folder_name,value = "auc")
View(min_max_df_m)
for (i in 1:range(std_df_m)){
}
print(i)
print(i)
for (i in 1:range(std_df_m)){
print(i)
}
for (i in 1:range(std_df_m)){
print(i)
}
mike <- cast(min_max_df, folder_name~classifier,value = "auc")
View(mike)
View(min_max_df)
View(assignment5MLresults)
View(mike)
min_max_df_m <- cast(min_max_df, folder_name~classifier,value = "auc")
std_df_m <- cast(std_df, folder_name~classifier,value = "auc")
min_max_df_m <- cast(min_max_df, folder_name~classifier,value = "auc")
minmax_std_df_m <- cast(minmax_std_df, folder_name~classifier,value = "auc")
View(min_max_df_m)
> plotCD (min_max_df_m, alpha=0.05, cex=1.25)
plotCD (min_max_df_m, alpha=0.05, cex=1.25)
??plotCD
test <- nemenyiTest (min_max_df_m, alpha=0.05)
??nemenyiTest
scmamp::nemenyiTest(test)
library(dplyr)
library(reshape)
library("scmamp")
library("ggplot2")
library("Rgraphviz")
install.packages(Rgraphviz)
install.packages("Rgraphviz")
plotCD(data.matrix(min_max_df_m)[,2:5], alpha=0.05, cex=1.25)
library("scmamp")
install.packages("graph")
R
version[['version.string']]
library("graph")
install.packages("graph")
library("scmamp")
library("graph")
library("scmamp")
library(scmamp)
View(min_max_df)
plotCD(data.matrix(min_max_df_m)[,2:5], alpha=0.05, cex=1.25)
cd
cd("/Users/Eider/GitHub/ML-assignments/Assignment5/Untitled.Rmd")
setwd("/Users/Eider/GitHub/ML-assignments/Assignment5/Untitled.Rmd")
setwd("\Users\Eider\GitHub\ML-assignments\Assignment5\Untitled.Rmd")
setwd("\Users\Eider\GitHub\ML-assignments\Assignment5\Untitled.Rmd")
setwd("/Users/Eider/GitHub/ML-assignments/Assignment5")
