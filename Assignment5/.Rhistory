geom_label_repel(
label.size = 0,
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
ggplot(meltAUCs_binary,aes(x=variable,y=value, fill = variable))+
geom_boxplot()+
ylab("AUC") +
geom_label_repel(
label.size = 0,
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
AUCs_binary <- read.csv("~/GitHub/ML-assignments/assignment2/AUCs_three.csv")
meltAUCs_binary <- melt(AUCs_binary)
meltAUCs_binary <- cbind(label=rep(seq(1,50),7),meltAUCs_binary)
colnames(meltAUCs_binary)
colnames(meltAUCs_binary) <- c("label","Model","AUC")
glimpse(meltAUCs_binary)
summary(meltAUCs_binary)
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its Model is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$Model[i]
if (meltAUCs_binary$Model[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=Model, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.size = 0,
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
AUCs_binary <- read.csv("~/GitHub/ML-assignments/assignment2/AUCs_three.csv")
meltAUCs_binary <- melt(AUCs_binary)
meltAUCs_binary <- cbind(label=rep(seq(1,50),7),meltAUCs_binary)
colnames(meltAUCs_binary) <- c("label","Model","AUC")
glimpse(meltAUCs_binary)
summary(meltAUCs_binary)
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=AUC, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.size = 0,
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
AUCs_binary <- read.csv("~/GitHub/ML-assignments/assignment2/AUCs_binary.csv")
meltAUCs_binary <- melt(AUCs_binary)
meltAUCs_binary <- cbind(label=rep(seq(1,50),7),meltAUCs_binary)
colnames(meltAUCs_binary) <- c("label","Model","AUC")
glimpse(meltAUCs_binary)
summary(meltAUCs_binary)
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=AUC, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.size = 0,
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
AUCs_binary <- read.csv("~/GitHub/ML-assignments/assignment2/AUCs_binary.csv")
meltAUCs_binary <- melt(AUCs_binary)
meltAUCs_binary <- cbind(label=rep(seq(1,50),7),meltAUCs_binary)
colnames(meltAUCs_binary) <- c("label","Model","AUC")
glimpse(meltAUCs_binary)
summary(meltAUCs_binary)
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=AUC, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.size = 0,
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
AUCs_binary <- read.csv("~/GitHub/ML-assignments/assignment2/AUCs_three.csv")
meltAUCs_binary <- melt(AUCs_binary)
meltAUCs_binary <- cbind(label=rep(seq(1,50),7),meltAUCs_binary)
colnames(meltAUCs_binary) <- c("label","Model","AUC")
glimpse(meltAUCs_binary)
summary(meltAUCs_binary)
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=AUC, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
AUCs_binary <- read.csv("~/GitHub/ML-assignments/assignment2/AUCs_binary.csv")
meltAUCs_binary <- melt(AUCs_binary)
meltAUCs_binary <- cbind(label=rep(seq(1,50),7),meltAUCs_binary)
colnames(meltAUCs_binary) <- c("label","Model","AUC")
glimpse(meltAUCs_binary)
summary(meltAUCs_binary)
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=AUC, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
AUCs_binary <- read.csv("~/GitHub/ML-assignments/assignment2/AUCs_binary.csv")
meltAUCs_binary <- melt(AUCs_binary)
meltAUCs_binary <- cbind(label=rep(seq(1,50),7),meltAUCs_binary)
colnames(meltAUCs_binary) <- c("label","Model","AUC")
glimpse(meltAUCs_binary)
summary(meltAUCs_binary)
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=AUC, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=AUC, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
AUCs_binary <- read.csv("~/GitHub/ML-assignments/assignment2/AUCs_binary.csv")
meltAUCs_binary <- melt(AUCs_binary)
meltAUCs_binary <- cbind(label=rep(seq(1,50),7),meltAUCs_binary)
colnames(meltAUCs_binary) <- c("label","Model","AUC")
glimpse(meltAUCs_binary)
summary(meltAUCs_binary)
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$AUC[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
AUCs_binary <- read.csv("~/GitHub/ML-assignments/assignment2/AUCs_three.csv")
meltAUCs_binary <- melt(AUCs_binary)
meltAUCs_binary <- cbind(label=rep(seq(1,50),7),meltAUCs_binary)
colnames(meltAUCs_binary) <- c("label","Model","AUC")
glimpse(meltAUCs_binary)
summary(meltAUCs_binary)
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$Model[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=AUC, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
AUCs_binary <- read.csv("~/GitHub/ML-assignments/assignment2/AUCs_binary.csv")
meltAUCs_binary <- melt(AUCs_binary)
meltAUCs_binary <- cbind(label=rep(seq(1,50),7),meltAUCs_binary)
colnames(meltAUCs_binary) <- c("label","Model","AUC")
glimpse(meltAUCs_binary)
summary(meltAUCs_binary)
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$Model[i]
if (meltAUCs_binary$AUC[i]  >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=AUC, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
AUCs_binary <- read.csv("~/GitHub/ML-assignments/assignment2/AUCs_three.csv")
meltAUCs_binary <- melt(AUCs_binary)
meltAUCs_binary <- cbind(label=rep(seq(1,50),7),meltAUCs_binary)
colnames(meltAUCs_binary) <- c("label","Model","AUC")
glimpse(meltAUCs_binary)
summary(meltAUCs_binary)
classifier <- unique(meltAUCs_binary$Model)
quantiles <- apply(AUCs_binary, 2,
function(x){
tail(sort(x),3)[1]
})
names(quantiles) <-classifier
#set labels to "_" when its value is greater than 3dr quantile
labels<- sapply(1:nrow(meltAUCs_binary),
function(i){
temp <-  meltAUCs_binary$Model[i]
if (meltAUCs_binary$AUC[i] >= quantiles[temp]){
meltAUCs_binary$label[i]
}
else{
"_"
}
})
meltAUCs_binary <- cbind(meltAUCs_binary,plabel=labels)
ggplot(meltAUCs_binary,aes(x=Model,y=AUC, fill = Model))+
geom_boxplot()+
geom_label_repel(
label.padding = unit(0.15, "lines"),
data=meltAUCs_binary %>%
filter(plabel!="_"), # 0.7161 is the 3rd quartile
aes(label=label)) +
theme_minimal()
shiny::runApp('GitHub/Shinny_app_DataProff')
runApp('GitHub/Shinny_app_DataProff/histograms.R')
runApp('GitHub/Shinny_app_DataProff/Wheather_weka.R')
runApp('GitHub/Shinny_app_DataProff/Wheather_weka.R')
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
View(weather)
# Build model
model <- randomForest(play ~ .,
data = weather,
ntree = 500,
mtry = 4,
importance = TRUE)
# Build model
model <- randomForest(as.factor(play) ~ .,
data = weather,
ntree = 500,
mtry = 4,
importance = TRUE)
runApp('GitHub/Shinny_app_DataProff/Wheather_weka.R')
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
weather$play <- as.factor(weather$play)
# Build model
model <- randomForest(play ~ .,
data = weather,
ntree = 500,
mtry = 4,
importance = TRUE)
runApp('GitHub/Shinny_app_DataProff/Wheather_weka.R')
weather[,c(1,5)] <- lapply(weather[,c(1,5)], factor)
View(weather)
setwd("/Users/Eider/GitHub/ML-assignments/Assignment5")
load("~/GitHub/ML-assignments/Assignment5/.RData")
library("scmamp")
install.packages("graph")
install.packages("~/Downloads/graph_1.30.0.tar.gz", repos = NULL, type = "source")
install.packages("yourpath/graph_1.56.0.zip",repos=NULL)
install.packages("/Users/Eider/Downloads/graph_1.68.0.tgz",repos=NULL)
library("graph")
library(reshape)
plotCD(data.matrix(min_max_df_m)[,2:5], alpha=0.05, cex=1.25)
View(min_max_df)
clas , data , auc
t1 <- cbind(classifer=min_max_df$classifier,dataset=min_max_df$folder_name,auc=min_max_df$auc)
View(t1)
t1 <- data.frame(cbind(classifer=min_max_df$classifier,dataset=min_max_df$folder_name,auc=min_max_df$auc))
table(assignment5MLresults$preprocessing)
raw_df <- assignment5MLresults %>% filter(preprocessing == "raw")
library(dplyr)
raw_df <- assignment5MLresults %>% filter(preprocessing == "raw")
std_df <- assignment5MLresults %>% filter(preprocessing == "std")
min_max_df <-assignment5MLresults %>% filter(preprocessing == "min_max")
raw_df <- data.frame(cbind(classifer=raw_df$classifier,dataset=raw_df$folder_name,auc=raw_df$auc))
std_df <- data.frame(cbind(classifer=std_df$classifier,dataset=std_df$folder_name,auc=std_df$auc))
min_max_df <-data.frame(cbind(classifer=min_max_df$classifier,dataset=min_max_df$folder_name,auc=min_max_df$auc))
write.csv(raw_df,"raw_df.csv")
write.csv(std_df,"std_df.csv")
write.csv(min_max_df,"min_max_df.csv")
library("graph")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("graph")
library("scmamp")
install.packages("Rgraphviz")
library("Rgraphviz")
BiocManager::install("Rgraphviz")
install.packages("Rgraphviz")
install.packages("Rgraphviz")
library("scmamp")
plotCD(min_max_df_m, alpha=0.05, cex=1.25)
View(min_max_df_m)
colnames(min_max_df_m) <- min_max_df_m$folder_name
row.names(min_max_df_m) <- min_max_df_m$folder_name
min_max_df_m$folder_name <- NULL
plotCD(min_max_df_m, alpha=0.05, cex=1.25)
plotdici <- plotCD(min_max_df_m, alpha=0.05, cex=1.25)
View(plotdici)
test <- nemenyiTest(min_max_df_m, alpha=0.05)
View(test)
